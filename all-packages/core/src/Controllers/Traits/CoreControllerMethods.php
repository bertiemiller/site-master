<?php

namespace Topicmine\Core\Controllers\Traits;

use DB;
use Route;
use Exception;
use App\Http\Requests;

trait CoreControllerMethods {

    public function __construct()
    {
        $this->setAuthUser();
        $this->setAccount();
        $this->setAccountUser();

        // activate core service
        core()->coreActivate();

        // prevents bug with artisan commands that process controller
        // before injected classes have been instantiated
        if (isset($this->repo) && $this->repo !== false)
        {
            // Used by ajax requests which read meta and use
            // headers for loading repository
            view()->share('repo', str_replace(['RepositoryInterface', 'Repository'], '', get_class($this->repo)));

            // Set the repo path in the core
            core()->setRepoPath($this->repo);

            // This is for setting the database connection based on account
            // Has to be done in middleware because users haven't been
            // created by authorisation yet in controllers
            $this->upgradeModelConnection();
        }

        // Shares relationships (typically Account or User owners)
        // set in controllers
        view()->share('modelOwner', $this->modelOwner);
        view()->share('modelRelation', $this->modelRelation);
    }

    public function index()
    {
        // Static views can be set in controllers
        if (false !== $this->useStaticView)
        {
            // By default index methods return paginated collections
            $paginator = $this->repo->paginate();

            // This collection is always transformed. The CoreRepository has a default transfomer,
            // but this can be overriden in each Repository with the transformer() method.
            $data = $this->repo->getTransformedPagination($paginator);

            // Sharing the full paginator for debugging. Can be deleted for live
            if (isset($data['paginator']))
            {
                view()->share(['paginator' => $data['paginator']]);
            }

            // Pagination is set in the CoreRepository (note it isn't the default Laravel pagination)
            if (isset($data['pagination']))
            {
                view()->share(['pagination' => $data['pagination']]);
            }

            // Sharing all the data with views
            view()->share(['data' => $data['data']]);

            // Static views let the controllers overide the default view at various levels
            // searching in this order:
            //      the package default
            //      the theme default
            //      and also the core default
            $packageControllerStaticView = 'admin.statics.packages.' . (new \ReflectionClass($this))->getShortName() . '.index';
            $themeDefaultView = 'admin.statics.admin-theme.default.index';
            $coreDefaultView = 'core.statics.default.index';

            if (view()->exists($packageControllerStaticView)){
                return view($packageControllerStaticView);
            } elseif (view()->exists($themeDefaultView)){
                return view($themeDefaultView);
            } elseif (view()->exists($coreDefaultView)){
                return view($coreDefaultView);
            } else{
                throw new Exception('Default static index view doesn\'t exist');
            }
        }

        // Ajax packages can also set a default folder route e.g. Datatables
        // Note no data is queried for the view. The only variables are
        // defaults and those set by view composer
        if (view()->exists($this->packageViewFolder . '.index'))
        {
            return view($this->packageViewFolder . '.index');
        }

        throw new Exception('Default index view doesn\'t exist');
    }

    public function edit($id)
    {
        // Packages views
        if (view()->exists($this->packageViewFolder . '.edit'))
        {
            return view($this->packageViewFolder . '.edit');
        }

        // Default packages
        $defaultView = 'admin.statics.default.edit';
        if (view()->exists($defaultView))
        {
            return view($defaultView);
        }

        throw new Exception('Default create view doesn\'t exist');
    }

    public function create()
    {
        // Packages views
        if (view()->exists($this->packageViewFolder . '.create'))
        {
            return view($this->packageViewFolder . '.create');
        }

        // Default views
        $defaultView = 'admin.statics.default.create';
        if (view()->exists($defaultView))
        {
            return view($defaultView);
        }

        throw new Exception('Default create view doesn\'t exist');
    }

    // Note not currently using this but is generated by the createRoutes function
    public function show($id)
    {
        $data['data'] = $this->repo->find($id);

        return view('admin.panels.show', compact('data'));
    }
}